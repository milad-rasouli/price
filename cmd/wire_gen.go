// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/milad-rasouli/price/internal/app/api/controllers"
	"github.com/milad-rasouli/price/internal/app/api/routes"
	"github.com/milad-rasouli/price/internal/infrastructure/coingecko"
	"github.com/milad-rasouli/price/internal/infrastructure/godotenv"
	"github.com/milad-rasouli/price/internal/infrastructure/postgresql"
	"github.com/milad-rasouli/price/internal/repository/repository/price/pgx"
	"github.com/milad-rasouli/price/internal/service"
	"log/slog"
)

import (
	_ "github.com/milad-rasouli/price/docs"
)

// Injectors from wire.go:

func wireApp(env *godotenv.Env, logger *slog.Logger, pg *postgresql.Postgres, pool *pgxpool.Pool) (*Boot, error) {
	priceRepository := pgx.NewPriceRepository(pool)
	coinGecko := coingecko.NewCoinGecko(logger)
	priceService := service.NewPriceService(logger, priceRepository, coinGecko)
	priceController := controller.NewPriceController(logger, priceService)
	priceRouter := routes.NewPriceRouter(priceController)
	cronController := controller.NewCronController(logger, priceService)
	cronRouter := routes.NewCronRouter(cronController)
	healthController := controller.NewHealthController(logger, pg)
	healthRouter := routes.NewHealthRouter(healthController)
	v := routes.CreateRouters(priceRouter, cronRouter, healthRouter)
	boot := NewBoot(env, logger, v...)
	return boot, nil
}
